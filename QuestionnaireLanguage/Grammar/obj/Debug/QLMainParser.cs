//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Daniel\Desktop\Backup\QuestionnaireLanguage\Grammar\QLMain.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class QLMainParser : Parser {
	public const int
		T__9=1, T__8=2, T__7=3, T__6=4, T__5=5, T__4=6, T__3=7, T__2=8, T__1=9, 
		T__0=10, GT=11, LT=12, EQ=13, NEQ=14, GET=15, LET=16, AND=17, OR=18, NOT=19, 
		MUL=20, DIV=21, SUB=22, ADD=23, TRUE=24, FALSE=25, BOOL=26, STRING=27, 
		DATE=28, INT=29, INTLITERAL=30, YEAR=31, MONTH=32, DAY=33, ALPHANUMERIC=34, 
		STRINGLITERAL=35, WS=36, BLOCK_COMMENT=37, LINE_COMMENT=38;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'question'", "'label'", "'('", "')'", "'computed'", "':'", 
		"'enable when'", "'{'", "'form'", "'}'", "'>'", "'<'", "'=='", "'!='", 
		"'>='", "'<='", "'&&'", "'||'", "'!'", "'*'", "'/'", "'-'", "'+'", "'True'", 
		"'False'", "'bool'", "'string'", "'date'", "'int'", "INTLITERAL", "YEAR", 
		"MONTH", "DAY", "ALPHANUMERIC", "STRINGLITERAL", "WS", "BLOCK_COMMENT", 
		"LINE_COMMENT"
	};
	public const int
		RULE_form = 0, RULE_formSection = 1, RULE_formObject = 2, RULE_question = 3, 
		RULE_conditional = 4, RULE_type = 5, RULE_value = 6, RULE_bool = 7, RULE_string = 8, 
		RULE_int = 9, RULE_id = 10, RULE_label = 11, RULE_computed = 12, RULE_expression = 13, 
		RULE_associative = 14, RULE_unary = 15, RULE_nonAssociative = 16;
	public static readonly string[] ruleNames = {
		"form", "formSection", "formObject", "question", "conditional", "type", 
		"value", "bool", "string", "int", "id", "label", "computed", "expression", 
		"associative", "unary", "nonAssociative"
	};

	public override string GrammarFileName { get { return "QLMain.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QLMainParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FormContext : ParserRuleContext {
		public FormSectionContext formSection() {
			return GetRuleContext<FormSectionContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_form);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(T__1);
			State = 35; formSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormSectionContext : ParserRuleContext {
		public FormObjectContext formObject(int i) {
			return GetRuleContext<FormObjectContext>(i);
		}
		public IReadOnlyList<FormObjectContext> formObject() {
			return GetRuleContexts<FormObjectContext>();
		}
		public FormSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formSection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormSectionContext formSection() {
		FormSectionContext _localctx = new FormSectionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_formSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(T__2);
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__9 || _la==T__3) {
				{
				{
				State = 38; formObject();
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 44; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormObjectContext : ParserRuleContext {
		public QuestionContext question() {
			return GetRuleContext<QuestionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public FormObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formObject; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormObjectContext formObject() {
		FormObjectContext _localctx = new FormObjectContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_formObject);
		try {
			State = 48;
			switch (_input.La(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; question();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; conditional();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ComputedContext computed() {
			return GetRuleContext<ComputedContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public QuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_question; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionContext question() {
		QuestionContext _localctx = new QuestionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_question);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(T__9);
			State = 51; id();
			State = 52; type();
			State = 53; label();
			State = 55;
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 54; computed();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormSectionContext formSection() {
			return GetRuleContext<FormSectionContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_conditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(T__3);
			State = 58; expression();
			State = 59; formSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolTypeContext : TypeContext {
		public ITerminalNode BOOL() { return GetToken(QLMainParser.BOOL, 0); }
		public BoolTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringTypeContext : TypeContext {
		public ITerminalNode STRING() { return GetToken(QLMainParser.STRING, 0); }
		public StringTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntTypeContext : TypeContext {
		public ITerminalNode INT() { return GetToken(QLMainParser.INT, 0); }
		public IntTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			State = 64;
			switch (_input.La(1)) {
			case BOOL:
				_localctx = new BoolTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(BOOL);
				}
				break;
			case STRING:
				_localctx = new StringTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(STRING);
				}
				break;
			case INT:
				_localctx = new IntTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolValueContext : ValueContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BoolValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValueContext : ValueContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntValueContext : ValueContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IntValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_value);
		try {
			State = 69;
			switch (_input.La(1)) {
			case TRUE:
			case FALSE:
				_localctx = new BoolValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; @bool();
				}
				break;
			case STRINGLITERAL:
				_localctx = new StringValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; @string();
				}
				break;
			case INTLITERAL:
				_localctx = new IntValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
	 
		public BoolContext() { }
		public virtual void CopyFrom(BoolContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TrueBoolContext : BoolContext {
		public ITerminalNode TRUE() { return GetToken(QLMainParser.TRUE, 0); }
		public TrueBoolContext(BoolContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseBoolContext : BoolContext {
		public ITerminalNode FALSE() { return GetToken(QLMainParser.FALSE, 0); }
		public FalseBoolContext(BoolContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_bool);
		try {
			State = 73;
			switch (_input.La(1)) {
			case TRUE:
				_localctx = new TrueBoolContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 71; Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new FalseBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(QLMainParser.STRINGLITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode INTLITERAL() { return GetToken(QLMainParser.INTLITERAL, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ALPHANUMERIC() { return GetToken(QLMainParser.ALPHANUMERIC, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(ALPHANUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(QLMainParser.STRINGLITERAL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(T__8);
			State = 82; Match(T__4);
			State = 83; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputedContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ComputedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computed; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputedContext computed() {
		ComputedContext _localctx = new ComputedContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_computed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__5);
			State = 86; Match(T__4);
			State = 87; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionValueContext : ExpressionContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ExpressionValueContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionNonAssociativeContext : ExpressionContext {
		public NonAssociativeContext nonAssociative() {
			return GetRuleContext<NonAssociativeContext>(0);
		}
		public ExpressionNonAssociativeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionNonAssociative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionAssociativeContext : ExpressionContext {
		public AssociativeContext associative() {
			return GetRuleContext<AssociativeContext>(0);
		}
		public ExpressionAssociativeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAssociative(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionIdContext : ExpressionContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionIdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			State = 93;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new ExpressionIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; id();
				}
				break;

			case 2:
				_localctx = new ExpressionValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; value();
				}
				break;

			case 3:
				_localctx = new ExpressionAssociativeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 91; associative(0);
				}
				break;

			case 4:
				_localctx = new ExpressionNonAssociativeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 92; nonAssociative();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssociativeContext : ParserRuleContext {
		public AssociativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_associative; } }
	 
		public AssociativeContext() { }
		public virtual void CopyFrom(AssociativeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DIVContext : AssociativeContext {
		public IToken op;
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(QLMainParser.DIV, 0); }
		public DIVContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDIV(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SUBContext : AssociativeContext {
		public IToken op;
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public ITerminalNode SUB() { return GetToken(QLMainParser.SUB, 0); }
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public SUBContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSUB(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ADDContext : AssociativeContext {
		public IToken op;
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(QLMainParser.ADD, 0); }
		public ADDContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitADD(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ORContext : AssociativeContext {
		public IToken op;
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode OR() { return GetToken(QLMainParser.OR, 0); }
		public ORContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOR(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MULContext : AssociativeContext {
		public IToken op;
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(QLMainParser.MUL, 0); }
		public MULContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMUL(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ANDContext : AssociativeContext {
		public IToken op;
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode AND() { return GetToken(QLMainParser.AND, 0); }
		public ANDContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAND(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssociativeUnaryContext : AssociativeContext {
		public UnaryContext unary() {
			return GetRuleContext<UnaryContext>(0);
		}
		public AssociativeUnaryContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociativeUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssociativeIdContext : AssociativeContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public AssociativeIdContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociativeId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssociativeValueContext : AssociativeContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public AssociativeValueContext(AssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssociativeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssociativeContext associative() {
		return associative(0);
	}

	private AssociativeContext associative(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		AssociativeContext _localctx = new AssociativeContext(_ctx, _parentState);
		AssociativeContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_associative, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			switch (_input.La(1)) {
			case T__7:
			case NOT:
				{
				_localctx = new AssociativeUnaryContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 96; unary();
				}
				break;
			case TRUE:
			case FALSE:
			case INTLITERAL:
			case STRINGLITERAL:
				{
				_localctx = new AssociativeValueContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 97; value();
				}
				break;
			case ALPHANUMERIC:
				{
				_localctx = new AssociativeIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 98; id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 121;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 119;
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						_localctx = new ANDContext(new AssociativeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_associative);
						State = 101;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						State = 102; ((ANDContext)_localctx).op = Match(AND);
						State = 103; associative(10);
						}
						break;

					case 2:
						{
						_localctx = new ORContext(new AssociativeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_associative);
						State = 104;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 105; ((ORContext)_localctx).op = Match(OR);
						State = 106; associative(9);
						}
						break;

					case 3:
						{
						_localctx = new MULContext(new AssociativeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_associative);
						State = 107;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 108; ((MULContext)_localctx).op = Match(MUL);
						State = 109; associative(8);
						}
						break;

					case 4:
						{
						_localctx = new DIVContext(new AssociativeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_associative);
						State = 110;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 111; ((DIVContext)_localctx).op = Match(DIV);
						State = 112; associative(7);
						}
						break;

					case 5:
						{
						_localctx = new SUBContext(new AssociativeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_associative);
						State = 113;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 114; ((SUBContext)_localctx).op = Match(SUB);
						State = 115; associative(6);
						}
						break;

					case 6:
						{
						_localctx = new ADDContext(new AssociativeContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_associative);
						State = 116;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 117; ((ADDContext)_localctx).op = Match(ADD);
						State = 118; associative(5);
						}
						break;
					}
					} 
				}
				State = 123;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UnaryContext : ParserRuleContext {
		public UnaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary; } }
	 
		public UnaryContext() { }
		public virtual void CopyFrom(UnaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegateUnaryContext : UnaryContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateUnaryContext(UnaryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityUnaryContext : UnaryContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PriorityUnaryContext(UnaryContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityUnary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnaryContext unary() {
		UnaryContext _localctx = new UnaryContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_unary);
		try {
			State = 130;
			switch (_input.La(1)) {
			case NOT:
				_localctx = new NegateUnaryContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; Match(NOT);
				State = 125; expression();
				}
				break;
			case T__7:
				_localctx = new PriorityUnaryContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; Match(T__7);
				State = 127; expression();
				State = 128; Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAssociativeContext : ParserRuleContext {
		public NonAssociativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAssociative; } }
	 
		public NonAssociativeContext() { }
		public virtual void CopyFrom(NonAssociativeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GETContext : NonAssociativeContext {
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode GET() { return GetToken(QLMainParser.GET, 0); }
		public GETContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGET(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LTContext : NonAssociativeContext {
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode LT() { return GetToken(QLMainParser.LT, 0); }
		public LTContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonAssociativeIdContext : NonAssociativeContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public NonAssociativeIdContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssociativeId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LETContext : NonAssociativeContext {
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode LET() { return GetToken(QLMainParser.LET, 0); }
		public LETContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLET(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonAssociativeValueContext : NonAssociativeContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public NonAssociativeValueContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssociativeValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NEQContext : NonAssociativeContext {
		public ITerminalNode NEQ() { return GetToken(QLMainParser.NEQ, 0); }
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public NEQContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNEQ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EQContext : NonAssociativeContext {
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(QLMainParser.EQ, 0); }
		public EQContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEQ(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GTContext : NonAssociativeContext {
		public IReadOnlyList<AssociativeContext> associative() {
			return GetRuleContexts<AssociativeContext>();
		}
		public AssociativeContext associative(int i) {
			return GetRuleContext<AssociativeContext>(i);
		}
		public ITerminalNode GT() { return GetToken(QLMainParser.GT, 0); }
		public GTContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGT(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonAssociativePriorityContext : NonAssociativeContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NonAssociativePriorityContext(NonAssociativeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssociativePriority(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonAssociativeContext nonAssociative() {
		NonAssociativeContext _localctx = new NonAssociativeContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_nonAssociative);
		try {
			State = 162;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				_localctx = new EQContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132; associative(0);
				State = 133; Match(EQ);
				State = 134; associative(0);
				}
				break;

			case 2:
				_localctx = new NEQContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; associative(0);
				State = 137; Match(NEQ);
				State = 138; associative(0);
				}
				break;

			case 3:
				_localctx = new GTContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 140; associative(0);
				State = 141; Match(GT);
				State = 142; associative(0);
				}
				break;

			case 4:
				_localctx = new GETContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 144; associative(0);
				State = 145; Match(GET);
				State = 146; associative(0);
				}
				break;

			case 5:
				_localctx = new LTContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 148; associative(0);
				State = 149; Match(LT);
				State = 150; associative(0);
				}
				break;

			case 6:
				_localctx = new LETContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 152; associative(0);
				State = 153; Match(LET);
				State = 154; associative(0);
				}
				break;

			case 7:
				_localctx = new NonAssociativePriorityContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 156; Match(T__7);
				State = 157; expression();
				State = 158; Match(T__6);
				}
				break;

			case 8:
				_localctx = new NonAssociativeValueContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 160; value();
				}
				break;

			case 9:
				_localctx = new NonAssociativeIdContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 161; id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return associative_sempred((AssociativeContext)_localctx, predIndex);
		}
		return true;
	}
	private bool associative_sempred(AssociativeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 9);

		case 1: return Precpred(_ctx, 8);

		case 2: return Precpred(_ctx, 7);

		case 3: return Precpred(_ctx, 6);

		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3(\xA7\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\a\x3*\n\x3"+
		"\f\x3\xE\x3-\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4\x33\n\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5:\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5"+
		"\a\x43\n\a\x3\b\x3\b\x3\b\x5\bH\n\b\x3\t\x3\t\x5\tL\n\t\x3\n\x3\n\x3\v"+
		"\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF`\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x66\n\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10z\n\x10"+
		"\f\x10\xE\x10}\v\x10\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11"+
		"\x85\n\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3"+
		"\x12\x3\x12\x5\x12\xA5\n\x12\x3\x12\x2\x2\x3\x1E\x13\x2\x2\x4\x2\x6\x2"+
		"\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2"+
		"\x1E\x2 \x2\"\x2\x2\x2\xB1\x2$\x3\x2\x2\x2\x4\'\x3\x2\x2\x2\x6\x32\x3"+
		"\x2\x2\x2\b\x34\x3\x2\x2\x2\n;\x3\x2\x2\x2\f\x42\x3\x2\x2\x2\xEG\x3\x2"+
		"\x2\x2\x10K\x3\x2\x2\x2\x12M\x3\x2\x2\x2\x14O\x3\x2\x2\x2\x16Q\x3\x2\x2"+
		"\x2\x18S\x3\x2\x2\x2\x1AW\x3\x2\x2\x2\x1C_\x3\x2\x2\x2\x1E\x65\x3\x2\x2"+
		"\x2 \x84\x3\x2\x2\x2\"\xA4\x3\x2\x2\x2$%\a\v\x2\x2%&\x5\x4\x3\x2&\x3\x3"+
		"\x2\x2\x2\'+\a\n\x2\x2(*\x5\x6\x4\x2)(\x3\x2\x2\x2*-\x3\x2\x2\x2+)\x3"+
		"\x2\x2\x2+,\x3\x2\x2\x2,.\x3\x2\x2\x2-+\x3\x2\x2\x2./\a\f\x2\x2/\x5\x3"+
		"\x2\x2\x2\x30\x33\x5\b\x5\x2\x31\x33\x5\n\x6\x2\x32\x30\x3\x2\x2\x2\x32"+
		"\x31\x3\x2\x2\x2\x33\a\x3\x2\x2\x2\x34\x35\a\x3\x2\x2\x35\x36\x5\x16\f"+
		"\x2\x36\x37\x5\f\a\x2\x37\x39\x5\x18\r\x2\x38:\x5\x1A\xE\x2\x39\x38\x3"+
		"\x2\x2\x2\x39:\x3\x2\x2\x2:\t\x3\x2\x2\x2;<\a\t\x2\x2<=\x5\x1C\xF\x2="+
		">\x5\x4\x3\x2>\v\x3\x2\x2\x2?\x43\a\x1C\x2\x2@\x43\a\x1D\x2\x2\x41\x43"+
		"\a\x1F\x2\x2\x42?\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x41\x3\x2\x2\x2\x43"+
		"\r\x3\x2\x2\x2\x44H\x5\x10\t\x2\x45H\x5\x12\n\x2\x46H\x5\x14\v\x2G\x44"+
		"\x3\x2\x2\x2G\x45\x3\x2\x2\x2G\x46\x3\x2\x2\x2H\xF\x3\x2\x2\x2IL\a\x1A"+
		"\x2\x2JL\a\x1B\x2\x2KI\x3\x2\x2\x2KJ\x3\x2\x2\x2L\x11\x3\x2\x2\x2MN\a"+
		"%\x2\x2N\x13\x3\x2\x2\x2OP\a \x2\x2P\x15\x3\x2\x2\x2QR\a$\x2\x2R\x17\x3"+
		"\x2\x2\x2ST\a\x4\x2\x2TU\a\b\x2\x2UV\a%\x2\x2V\x19\x3\x2\x2\x2WX\a\a\x2"+
		"\x2XY\a\b\x2\x2YZ\x5\x1C\xF\x2Z\x1B\x3\x2\x2\x2[`\x5\x16\f\x2\\`\x5\xE"+
		"\b\x2]`\x5\x1E\x10\x2^`\x5\"\x12\x2_[\x3\x2\x2\x2_\\\x3\x2\x2\x2_]\x3"+
		"\x2\x2\x2_^\x3\x2\x2\x2`\x1D\x3\x2\x2\x2\x61\x62\b\x10\x1\x2\x62\x66\x5"+
		" \x11\x2\x63\x66\x5\xE\b\x2\x64\x66\x5\x16\f\x2\x65\x61\x3\x2\x2\x2\x65"+
		"\x63\x3\x2\x2\x2\x65\x64\x3\x2\x2\x2\x66{\x3\x2\x2\x2gh\f\v\x2\x2hi\a"+
		"\x13\x2\x2iz\x5\x1E\x10\fjk\f\n\x2\x2kl\a\x14\x2\x2lz\x5\x1E\x10\vmn\f"+
		"\t\x2\x2no\a\x16\x2\x2oz\x5\x1E\x10\npq\f\b\x2\x2qr\a\x17\x2\x2rz\x5\x1E"+
		"\x10\tst\f\a\x2\x2tu\a\x18\x2\x2uz\x5\x1E\x10\bvw\f\x6\x2\x2wx\a\x19\x2"+
		"\x2xz\x5\x1E\x10\ayg\x3\x2\x2\x2yj\x3\x2\x2\x2ym\x3\x2\x2\x2yp\x3\x2\x2"+
		"\x2ys\x3\x2\x2\x2yv\x3\x2\x2\x2z}\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2"+
		"\x2|\x1F\x3\x2\x2\x2}{\x3\x2\x2\x2~\x7F\a\x15\x2\x2\x7F\x85\x5\x1C\xF"+
		"\x2\x80\x81\a\x5\x2\x2\x81\x82\x5\x1C\xF\x2\x82\x83\a\x6\x2\x2\x83\x85"+
		"\x3\x2\x2\x2\x84~\x3\x2\x2\x2\x84\x80\x3\x2\x2\x2\x85!\x3\x2\x2\x2\x86"+
		"\x87\x5\x1E\x10\x2\x87\x88\a\xF\x2\x2\x88\x89\x5\x1E\x10\x2\x89\xA5\x3"+
		"\x2\x2\x2\x8A\x8B\x5\x1E\x10\x2\x8B\x8C\a\x10\x2\x2\x8C\x8D\x5\x1E\x10"+
		"\x2\x8D\xA5\x3\x2\x2\x2\x8E\x8F\x5\x1E\x10\x2\x8F\x90\a\r\x2\x2\x90\x91"+
		"\x5\x1E\x10\x2\x91\xA5\x3\x2\x2\x2\x92\x93\x5\x1E\x10\x2\x93\x94\a\x11"+
		"\x2\x2\x94\x95\x5\x1E\x10\x2\x95\xA5\x3\x2\x2\x2\x96\x97\x5\x1E\x10\x2"+
		"\x97\x98\a\xE\x2\x2\x98\x99\x5\x1E\x10\x2\x99\xA5\x3\x2\x2\x2\x9A\x9B"+
		"\x5\x1E\x10\x2\x9B\x9C\a\x12\x2\x2\x9C\x9D\x5\x1E\x10\x2\x9D\xA5\x3\x2"+
		"\x2\x2\x9E\x9F\a\x5\x2\x2\x9F\xA0\x5\x1C\xF\x2\xA0\xA1\a\x6\x2\x2\xA1"+
		"\xA5\x3\x2\x2\x2\xA2\xA5\x5\xE\b\x2\xA3\xA5\x5\x16\f\x2\xA4\x86\x3\x2"+
		"\x2\x2\xA4\x8A\x3\x2\x2\x2\xA4\x8E\x3\x2\x2\x2\xA4\x92\x3\x2\x2\x2\xA4"+
		"\x96\x3\x2\x2\x2\xA4\x9A\x3\x2\x2\x2\xA4\x9E\x3\x2\x2\x2\xA4\xA2\x3\x2"+
		"\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5#\x3\x2\x2\x2\xE+\x32\x39\x42GK_\x65y{\x84"+
		"\xA4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Grammar
