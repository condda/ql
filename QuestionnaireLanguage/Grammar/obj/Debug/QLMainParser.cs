//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonatan\Desktop\QL Github\ql\QuestionnaireLanguage\Grammar\QLMain.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class QLMainParser : Parser {
	public const int
		T__20=1, T__19=2, T__18=3, T__17=4, T__16=5, T__15=6, T__14=7, T__13=8, 
		T__12=9, T__11=10, T__10=11, T__9=12, T__8=13, T__7=14, T__6=15, T__5=16, 
		T__4=17, T__3=18, T__2=19, T__1=20, T__0=21, GT=22, LT=23, EQ=24, NEQ=25, 
		GET=26, LET=27, AND=28, OR=29, NOT=30, MUL=31, DIV=32, SUB=33, ADD=34, 
		INT=35, DECIMAL=36, MONEY=37, YEAR=38, MONTH=39, DAY=40, ALPHANUMERIC=41, 
		STRING=42, WS=43, BLOCK_COMMENT=44, LINE_COMMENT=45;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'decimal'", "'enable when'", "'{'", "'='", "'}'", "'list['", 
		"'money'", "'int'", "'('", "'False'", "','", "'['", "']'", "'date('", 
		"'True'", "'bool'", "'question'", "'date'", "'string'", "')'", "'form'", 
		"'>'", "'<'", "'=='", "'!='", "'>='", "'<='", "'&&'", "'||'", "'!'", "'*'", 
		"'/'", "'-'", "'+'", "INT", "DECIMAL", "MONEY", "YEAR", "MONTH", "DAY", 
		"ALPHANUMERIC", "STRING", "WS", "BLOCK_COMMENT", "LINE_COMMENT"
	};
	public const int
		RULE_form = 0, RULE_formSection = 1, RULE_formObject = 2, RULE_question = 3, 
		RULE_conditional = 4, RULE_typeName = 5, RULE_listTypeName = 6, RULE_primitiveTypeName = 7, 
		RULE_type = 8, RULE_bool = 9, RULE_date = 10, RULE_num = 11, RULE_list = 12, 
		RULE_year = 13, RULE_month = 14, RULE_day = 15, RULE_string = 16, RULE_int = 17, 
		RULE_decimal = 18, RULE_money = 19, RULE_id = 20, RULE_keyValuePairs = 21, 
		RULE_keyValuePair = 22, RULE_key = 23, RULE_expression = 24, RULE_comparison = 25, 
		RULE_arithmetic = 26;
	public static readonly string[] ruleNames = {
		"form", "formSection", "formObject", "question", "conditional", "typeName", 
		"listTypeName", "primitiveTypeName", "type", "bool", "date", "num", "list", 
		"year", "month", "day", "string", "int", "decimal", "money", "id", "keyValuePairs", 
		"keyValuePair", "key", "expression", "comparison", "arithmetic"
	};

	public override string GrammarFileName { get { return "QLMain.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QLMainParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FormContext : ParserRuleContext {
		public FormSectionContext formSection() {
			return GetRuleContext<FormSectionContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_form);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(T__0);
			State = 55; formSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormSectionContext : ParserRuleContext {
		public FormObjectContext formObject(int i) {
			return GetRuleContext<FormObjectContext>(i);
		}
		public IReadOnlyList<FormObjectContext> formObject() {
			return GetRuleContexts<FormObjectContext>();
		}
		public FormSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formSection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormSectionContext formSection() {
		FormSectionContext _localctx = new FormSectionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_formSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(T__18);
			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__19 || _la==T__4) {
				{
				{
				State = 58; formObject();
				}
				}
				State = 63;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 64; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormObjectContext : ParserRuleContext {
		public QuestionContext question() {
			return GetRuleContext<QuestionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public FormObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formObject; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormObjectContext formObject() {
		FormObjectContext _localctx = new FormObjectContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_formObject);
		try {
			State = 68;
			switch (_input.La(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; question();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; conditional();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public KeyValuePairsContext keyValuePairs() {
			return GetRuleContext<KeyValuePairsContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public QuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_question; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionContext question() {
		QuestionContext _localctx = new QuestionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_question);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(T__4);
			State = 71; id();
			State = 72; typeName();
			State = 73; keyValuePairs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormSectionContext formSection() {
			return GetRuleContext<FormSectionContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_conditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(T__19);
			State = 76; expression(0);
			State = 77; formSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public PrimitiveTypeNameContext primitiveTypeName() {
			return GetRuleContext<PrimitiveTypeNameContext>(0);
		}
		public ListTypeNameContext listTypeName() {
			return GetRuleContext<ListTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_typeName);
		try {
			State = 81;
			switch (_input.La(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79; listTypeName();
				}
				break;
			case T__20:
			case T__14:
			case T__13:
			case T__5:
			case T__3:
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80; primitiveTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeNameContext : ParserRuleContext {
		public PrimitiveTypeNameContext primitiveTypeName() {
			return GetRuleContext<PrimitiveTypeNameContext>(0);
		}
		public ListTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listTypeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeNameContext listTypeName() {
		ListTypeNameContext _localctx = new ListTypeNameContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_listTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(T__15);
			State = 84; primitiveTypeName();
			State = 85; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeNameContext : ParserRuleContext {
		public PrimitiveTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveTypeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeNameContext primitiveTypeName() {
		PrimitiveTypeNameContext _localctx = new PrimitiveTypeNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_primitiveTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__14) | (1L << T__13) | (1L << T__5) | (1L << T__3) | (1L << T__2))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumValueContext : TypeContext {
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public NumValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateValueContext : TypeContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DateValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListValueContext : TypeContext {
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolValueContext : TypeContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BoolValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValueContext : TypeContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_type);
		try {
			State = 94;
			switch (_input.La(1)) {
			case T__11:
			case T__6:
				_localctx = new BoolValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; @bool();
				}
				break;
			case STRING:
				_localctx = new StringValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; @string();
				}
				break;
			case T__7:
				_localctx = new DateValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 91; date();
				}
				break;
			case INT:
			case DECIMAL:
			case MONEY:
				_localctx = new NumValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 92; num();
				}
				break;
			case T__9:
				_localctx = new ListValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 93; list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			_la = _input.La(1);
			if ( !(_la==T__11 || _la==T__6) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public YearContext year() {
			return GetRuleContext<YearContext>(0);
		}
		public MonthContext month() {
			return GetRuleContext<MonthContext>(0);
		}
		public DayContext day() {
			return GetRuleContext<DayContext>(0);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_date);
		try {
			State = 116;
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98; Match(T__7);
				State = 99; year();
				State = 100; Match(DIV);
				State = 101; month();
				State = 102; Match(DIV);
				State = 103; day();
				State = 104; Match(T__1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; Match(T__7);
				State = 107; year();
				State = 108; Match(DIV);
				State = 109; month();
				State = 110; Match(T__1);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; Match(T__7);
				State = 113; year();
				State = 114; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
	 
		public NumContext() { }
		public virtual void CopyFrom(NumContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumIntContext : NumContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public NumIntContext(NumContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumDecimalContext : NumContext {
		public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public NumDecimalContext(NumContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumMoneyContext : NumContext {
		public MoneyContext money() {
			return GetRuleContext<MoneyContext>(0);
		}
		public NumMoneyContext(NumContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumMoney(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_num);
		try {
			State = 121;
			switch (_input.La(1)) {
			case INT:
				_localctx = new NumIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; @int();
				}
				break;
			case MONEY:
				_localctx = new NumMoneyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; money();
				}
				break;
			case DECIMAL:
				_localctx = new NumDecimalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 120; @decimal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IReadOnlyList<TypeContext> type() {
			return GetRuleContexts<TypeContext>();
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(T__9);
			State = 132;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__9) | (1L << T__7) | (1L << T__6) | (1L << INT) | (1L << DECIMAL) | (1L << MONEY) | (1L << STRING))) != 0)) {
				{
				State = 124; type();
				State = 129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__10) {
					{
					{
					State = 125; Match(T__10);
					State = 126; type();
					}
					}
					State = 131;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 134; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YearContext : ParserRuleContext {
		public ITerminalNode YEAR() { return GetToken(QLMainParser.YEAR, 0); }
		public YearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_year; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYear(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YearContext year() {
		YearContext _localctx = new YearContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_year);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(YEAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthContext : ParserRuleContext {
		public ITerminalNode MONTH() { return GetToken(QLMainParser.MONTH, 0); }
		public MonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_month; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthContext month() {
		MonthContext _localctx = new MonthContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_month);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(MONTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayContext : ParserRuleContext {
		public ITerminalNode DAY() { return GetToken(QLMainParser.DAY, 0); }
		public DayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_day; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayContext day() {
		DayContext _localctx = new DayContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_day);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(DAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QLMainParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(QLMainParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(QLMainParser.DECIMAL, 0); }
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_decimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoneyContext : ParserRuleContext {
		public ITerminalNode MONEY() { return GetToken(QLMainParser.MONEY, 0); }
		public MoneyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_money; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoney(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoneyContext money() {
		MoneyContext _localctx = new MoneyContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_money);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(MONEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ALPHANUMERIC() { return GetToken(QLMainParser.ALPHANUMERIC, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(ALPHANUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairsContext : ParserRuleContext {
		public KeyValuePairContext _keyValuePair;
		public IList<KeyValuePairContext> _kvp = new List<KeyValuePairContext>();
		public IReadOnlyList<KeyValuePairContext> keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		public KeyValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePairs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairsContext keyValuePairs() {
		KeyValuePairsContext _localctx = new KeyValuePairsContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_keyValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(T__18);
			State = 153; _localctx._keyValuePair = keyValuePair();
			_localctx._kvp.Add(_localctx._keyValuePair);
			State = 158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__10) {
				{
				{
				State = 154; Match(T__10);
				State = 155; _localctx._keyValuePair = keyValuePair();
				_localctx._kvp.Add(_localctx._keyValuePair);
				}
				}
				State = 160;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 161; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; key();
			State = 164; Match(T__17);
			State = 165; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode ALPHANUMERIC() { return GetToken(QLMainParser.ALPHANUMERIC, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(ALPHANUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PriorityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueExpressionContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdExpressionContext : ExpressionContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IdExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 48;
		EnterRecursionRule(_localctx, 48, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				_localctx = new NegateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 170; Match(NOT);
				State = 171; expression(5);
				}
				break;

			case 2:
				{
				_localctx = new PriorityExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 172; Match(T__12);
				State = 173; expression(0);
				State = 174; Match(T__1);
				}
				break;

			case 3:
				{
				_localctx = new ValueExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 176; type();
				}
				break;

			case 4:
				{
				_localctx = new IdExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 177; id();
				}
				break;

			case 5:
				{
				_localctx = new EqualityContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 178; arithmetic(0);
				State = 179;
				((EqualityContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==EQ || _la==NEQ) ) {
					((EqualityContext)_localctx).op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 180; arithmetic(0);
				}
				break;

			case 6:
				{
				_localctx = new ComparisonExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 182; comparison();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 193;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 191;
					switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
					case 1:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 185;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 186; ((AndContext)_localctx).op = Match(AND);
						State = 187; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 188;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 189; ((OrContext)_localctx).op = Match(OR);
						State = 190; expression(4);
						}
						break;
					}
					} 
				}
				State = 195;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	 
		public ComparisonContext() { }
		public virtual void CopyFrom(ComparisonContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PriorityComparisonContext : ComparisonContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public PriorityComparisonContext(ComparisonContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalComparisonContext : ComparisonContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public RelationalComparisonContext(ComparisonContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_comparison);
		int _la;
		try {
			State = 204;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				_localctx = new PriorityComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 196; Match(T__12);
				State = 197; comparison();
				State = 198; Match(T__1);
				}
				break;

			case 2:
				_localctx = new RelationalComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 200; arithmetic(0);
				State = 201;
				((RelationalComparisonContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GET) | (1L << LET))) != 0)) ) {
					((RelationalComparisonContext)_localctx).op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 202; arithmetic(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticContext : ParserRuleContext {
		public ArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic; } }
	 
		public ArithmeticContext() { }
		public virtual void CopyFrom(ArithmeticContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubAddContext : ArithmeticContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public SubAddContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdArithmeticContext : ArithmeticContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IdArithmeticContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivMulContext : ArithmeticContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public DivMulContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueArithmeticContext : ArithmeticContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ValueArithmeticContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityArithmeticContext : ArithmeticContext {
		public ArithmeticContext arithmetic() {
			return GetRuleContext<ArithmeticContext>(0);
		}
		public PriorityArithmeticContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticContext arithmetic() {
		return arithmetic(0);
	}

	private ArithmeticContext arithmetic(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ArithmeticContext _localctx = new ArithmeticContext(_ctx, _parentState);
		ArithmeticContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_arithmetic, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			switch (_input.La(1)) {
			case T__12:
				{
				_localctx = new PriorityArithmeticContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 207; Match(T__12);
				State = 208; arithmetic(0);
				State = 209; Match(T__1);
				}
				break;
			case T__11:
			case T__9:
			case T__7:
			case T__6:
			case INT:
			case DECIMAL:
			case MONEY:
			case STRING:
				{
				_localctx = new ValueArithmeticContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 211; type();
				}
				break;
			case ALPHANUMERIC:
				{
				_localctx = new IdArithmeticContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 212; id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 223;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 221;
					switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
					case 1:
						{
						_localctx = new DivMulContext(new ArithmeticContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic);
						State = 215;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 216;
						((DivMulContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((DivMulContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 217; arithmetic(5);
						}
						break;

					case 2:
						{
						_localctx = new SubAddContext(new ArithmeticContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic);
						State = 218;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 219;
						((SubAddContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==SUB || _la==ADD) ) {
							((SubAddContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 220; arithmetic(4);
						}
						break;
					}
					} 
				}
				State = 225;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 24: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 26: return arithmetic_sempred((ArithmeticContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool arithmetic_sempred(ArithmeticContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3/\xE5\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\a\x3>\n\x3\f\x3\xE\x3"+
		"\x41\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4G\n\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x5\aT\n\a\x3\b\x3\b\x3\b\x3\b"+
		"\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x61\n\n\x3\v\x3\v\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x5\fw\n\f\x3\r\x3\r\x3\r\x5\r|\n\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE"+
		"\x82\n\xE\f\xE\xE\xE\x85\v\xE\x5\xE\x87\n\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\a\x17\x9F\n\x17"+
		"\f\x17\xE\x17\xA2\v\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\xBA\n\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\a\x1A\xC2\n\x1A\f\x1A\xE\x1A\xC5\v\x1A\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\xCF\n\x1B\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\xD8\n\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\a\x1C\xE0\n\x1C\f\x1C\xE\x1C\xE3\v"+
		"\x1C\x3\x1C\x2\x2\x4\x32\x36\x1D\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x2\b\x6\x2\x3\x3\t\n"+
		"\x12\x12\x14\x15\x4\x2\f\f\x11\x11\x3\x2\x1A\x1B\x4\x2\x18\x19\x1C\x1D"+
		"\x3\x2!\"\x3\x2#$\xE3\x2\x38\x3\x2\x2\x2\x4;\x3\x2\x2\x2\x6\x46\x3\x2"+
		"\x2\x2\bH\x3\x2\x2\x2\nM\x3\x2\x2\x2\fS\x3\x2\x2\x2\xEU\x3\x2\x2\x2\x10"+
		"Y\x3\x2\x2\x2\x12`\x3\x2\x2\x2\x14\x62\x3\x2\x2\x2\x16v\x3\x2\x2\x2\x18"+
		"{\x3\x2\x2\x2\x1A}\x3\x2\x2\x2\x1C\x8A\x3\x2\x2\x2\x1E\x8C\x3\x2\x2\x2"+
		" \x8E\x3\x2\x2\x2\"\x90\x3\x2\x2\x2$\x92\x3\x2\x2\x2&\x94\x3\x2\x2\x2"+
		"(\x96\x3\x2\x2\x2*\x98\x3\x2\x2\x2,\x9A\x3\x2\x2\x2.\xA5\x3\x2\x2\x2\x30"+
		"\xA9\x3\x2\x2\x2\x32\xB9\x3\x2\x2\x2\x34\xCE\x3\x2\x2\x2\x36\xD7\x3\x2"+
		"\x2\x2\x38\x39\a\x17\x2\x2\x39:\x5\x4\x3\x2:\x3\x3\x2\x2\x2;?\a\x5\x2"+
		"\x2<>\x5\x6\x4\x2=<\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2"+
		"\x2\x2@\x42\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42\x43\a\a\x2\x2\x43\x5\x3\x2"+
		"\x2\x2\x44G\x5\b\x5\x2\x45G\x5\n\x6\x2\x46\x44\x3\x2\x2\x2\x46\x45\x3"+
		"\x2\x2\x2G\a\x3\x2\x2\x2HI\a\x13\x2\x2IJ\x5*\x16\x2JK\x5\f\a\x2KL\x5,"+
		"\x17\x2L\t\x3\x2\x2\x2MN\a\x4\x2\x2NO\x5\x32\x1A\x2OP\x5\x4\x3\x2P\v\x3"+
		"\x2\x2\x2QT\x5\xE\b\x2RT\x5\x10\t\x2SQ\x3\x2\x2\x2SR\x3\x2\x2\x2T\r\x3"+
		"\x2\x2\x2UV\a\b\x2\x2VW\x5\x10\t\x2WX\a\xF\x2\x2X\xF\x3\x2\x2\x2YZ\t\x2"+
		"\x2\x2Z\x11\x3\x2\x2\x2[\x61\x5\x14\v\x2\\\x61\x5\"\x12\x2]\x61\x5\x16"+
		"\f\x2^\x61\x5\x18\r\x2_\x61\x5\x1A\xE\x2`[\x3\x2\x2\x2`\\\x3\x2\x2\x2"+
		"`]\x3\x2\x2\x2`^\x3\x2\x2\x2`_\x3\x2\x2\x2\x61\x13\x3\x2\x2\x2\x62\x63"+
		"\t\x3\x2\x2\x63\x15\x3\x2\x2\x2\x64\x65\a\x10\x2\x2\x65\x66\x5\x1C\xF"+
		"\x2\x66g\a\"\x2\x2gh\x5\x1E\x10\x2hi\a\"\x2\x2ij\x5 \x11\x2jk\a\x16\x2"+
		"\x2kw\x3\x2\x2\x2lm\a\x10\x2\x2mn\x5\x1C\xF\x2no\a\"\x2\x2op\x5\x1E\x10"+
		"\x2pq\a\x16\x2\x2qw\x3\x2\x2\x2rs\a\x10\x2\x2st\x5\x1C\xF\x2tu\a\x16\x2"+
		"\x2uw\x3\x2\x2\x2v\x64\x3\x2\x2\x2vl\x3\x2\x2\x2vr\x3\x2\x2\x2w\x17\x3"+
		"\x2\x2\x2x|\x5$\x13\x2y|\x5(\x15\x2z|\x5&\x14\x2{x\x3\x2\x2\x2{y\x3\x2"+
		"\x2\x2{z\x3\x2\x2\x2|\x19\x3\x2\x2\x2}\x86\a\xE\x2\x2~\x83\x5\x12\n\x2"+
		"\x7F\x80\a\r\x2\x2\x80\x82\x5\x12\n\x2\x81\x7F\x3\x2\x2\x2\x82\x85\x3"+
		"\x2\x2\x2\x83\x81\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x87\x3\x2\x2\x2"+
		"\x85\x83\x3\x2\x2\x2\x86~\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\x88\x3\x2"+
		"\x2\x2\x88\x89\a\xF\x2\x2\x89\x1B\x3\x2\x2\x2\x8A\x8B\a(\x2\x2\x8B\x1D"+
		"\x3\x2\x2\x2\x8C\x8D\a)\x2\x2\x8D\x1F\x3\x2\x2\x2\x8E\x8F\a*\x2\x2\x8F"+
		"!\x3\x2\x2\x2\x90\x91\a,\x2\x2\x91#\x3\x2\x2\x2\x92\x93\a%\x2\x2\x93%"+
		"\x3\x2\x2\x2\x94\x95\a&\x2\x2\x95\'\x3\x2\x2\x2\x96\x97\a\'\x2\x2\x97"+
		")\x3\x2\x2\x2\x98\x99\a+\x2\x2\x99+\x3\x2\x2\x2\x9A\x9B\a\x5\x2\x2\x9B"+
		"\xA0\x5.\x18\x2\x9C\x9D\a\r\x2\x2\x9D\x9F\x5.\x18\x2\x9E\x9C\x3\x2\x2"+
		"\x2\x9F\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3"+
		"\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA4\a\a\x2\x2\xA4-\x3\x2\x2\x2\xA5"+
		"\xA6\x5\x30\x19\x2\xA6\xA7\a\x6\x2\x2\xA7\xA8\x5\x32\x1A\x2\xA8/\x3\x2"+
		"\x2\x2\xA9\xAA\a+\x2\x2\xAA\x31\x3\x2\x2\x2\xAB\xAC\b\x1A\x1\x2\xAC\xAD"+
		"\a \x2\x2\xAD\xBA\x5\x32\x1A\a\xAE\xAF\a\v\x2\x2\xAF\xB0\x5\x32\x1A\x2"+
		"\xB0\xB1\a\x16\x2\x2\xB1\xBA\x3\x2\x2\x2\xB2\xBA\x5\x12\n\x2\xB3\xBA\x5"+
		"*\x16\x2\xB4\xB5\x5\x36\x1C\x2\xB5\xB6\t\x4\x2\x2\xB6\xB7\x5\x36\x1C\x2"+
		"\xB7\xBA\x3\x2\x2\x2\xB8\xBA\x5\x34\x1B\x2\xB9\xAB\x3\x2\x2\x2\xB9\xAE"+
		"\x3\x2\x2\x2\xB9\xB2\x3\x2\x2\x2\xB9\xB3\x3\x2\x2\x2\xB9\xB4\x3\x2\x2"+
		"\x2\xB9\xB8\x3\x2\x2\x2\xBA\xC3\x3\x2\x2\x2\xBB\xBC\f\x6\x2\x2\xBC\xBD"+
		"\a\x1E\x2\x2\xBD\xC2\x5\x32\x1A\a\xBE\xBF\f\x5\x2\x2\xBF\xC0\a\x1F\x2"+
		"\x2\xC0\xC2\x5\x32\x1A\x6\xC1\xBB\x3\x2\x2\x2\xC1\xBE\x3\x2\x2\x2\xC2"+
		"\xC5\x3\x2\x2\x2\xC3\xC1\x3\x2\x2\x2\xC3\xC4\x3\x2\x2\x2\xC4\x33\x3\x2"+
		"\x2\x2\xC5\xC3\x3\x2\x2\x2\xC6\xC7\a\v\x2\x2\xC7\xC8\x5\x34\x1B\x2\xC8"+
		"\xC9\a\x16\x2\x2\xC9\xCF\x3\x2\x2\x2\xCA\xCB\x5\x36\x1C\x2\xCB\xCC\t\x5"+
		"\x2\x2\xCC\xCD\x5\x36\x1C\x2\xCD\xCF\x3\x2\x2\x2\xCE\xC6\x3\x2\x2\x2\xCE"+
		"\xCA\x3\x2\x2\x2\xCF\x35\x3\x2\x2\x2\xD0\xD1\b\x1C\x1\x2\xD1\xD2\a\v\x2"+
		"\x2\xD2\xD3\x5\x36\x1C\x2\xD3\xD4\a\x16\x2\x2\xD4\xD8\x3\x2\x2\x2\xD5"+
		"\xD8\x5\x12\n\x2\xD6\xD8\x5*\x16\x2\xD7\xD0\x3\x2\x2\x2\xD7\xD5\x3\x2"+
		"\x2\x2\xD7\xD6\x3\x2\x2\x2\xD8\xE1\x3\x2\x2\x2\xD9\xDA\f\x6\x2\x2\xDA"+
		"\xDB\t\x6\x2\x2\xDB\xE0\x5\x36\x1C\a\xDC\xDD\f\x5\x2\x2\xDD\xDE\t\a\x2"+
		"\x2\xDE\xE0\x5\x36\x1C\x6\xDF\xD9\x3\x2\x2\x2\xDF\xDC\x3\x2\x2\x2\xE0"+
		"\xE3\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE1\xE2\x3\x2\x2\x2\xE2\x37\x3\x2"+
		"\x2\x2\xE3\xE1\x3\x2\x2\x2\x12?\x46S`v{\x83\x86\xA0\xB9\xC1\xC3\xCE\xD7"+
		"\xDF\xE1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Grammar
