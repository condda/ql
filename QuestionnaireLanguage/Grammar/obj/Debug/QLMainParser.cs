//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Jonatan\Desktop\Backup\QuestionnaireLanguage\Grammar\QLMain.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class QLMainParser : Parser {
	public const int
		T__20=1, T__19=2, T__18=3, T__17=4, T__16=5, T__15=6, T__14=7, T__13=8, 
		T__12=9, T__11=10, T__10=11, T__9=12, T__8=13, T__7=14, T__6=15, T__5=16, 
		T__4=17, T__3=18, T__2=19, T__1=20, T__0=21, GT=22, LT=23, EQ=24, NEQ=25, 
		GET=26, LET=27, AND=28, OR=29, NOT=30, MUL=31, DIV=32, SUB=33, ADD=34, 
		INT=35, DECIMAL=36, MONEY=37, YEAR=38, MONTH=39, DAY=40, ALPHANUMERIC=41, 
		STRING=42, WS=43, BLOCK_COMMENT=44, LINE_COMMENT=45;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'decimal'", "'enable when'", "'{'", "'='", "'}'", "'list['", 
		"'money'", "'int'", "'('", "'False'", "','", "'['", "']'", "'date('", 
		"'True'", "'bool'", "'question'", "'date'", "'string'", "')'", "'form'", 
		"'>'", "'<'", "'=='", "'!='", "'>='", "'<='", "'&&'", "'||'", "'!'", "'*'", 
		"'/'", "'-'", "'+'", "INT", "DECIMAL", "MONEY", "YEAR", "MONTH", "DAY", 
		"ALPHANUMERIC", "STRING", "WS", "BLOCK_COMMENT", "LINE_COMMENT"
	};
	public const int
		RULE_form = 0, RULE_formSection = 1, RULE_formObject = 2, RULE_question = 3, 
		RULE_conditional = 4, RULE_typeName = 5, RULE_genericTypeName = 6, RULE_primitiveTypeName = 7, 
		RULE_value = 8, RULE_type = 9, RULE_bool = 10, RULE_date = 11, RULE_num = 12, 
		RULE_list = 13, RULE_year = 14, RULE_month = 15, RULE_day = 16, RULE_string = 17, 
		RULE_int = 18, RULE_decimal = 19, RULE_money = 20, RULE_id = 21, RULE_keyValuePairs = 22, 
		RULE_keyValuePair = 23, RULE_key = 24, RULE_expression = 25, RULE_comparison = 26, 
		RULE_arithmetic = 27;
	public static readonly string[] ruleNames = {
		"form", "formSection", "formObject", "question", "conditional", "typeName", 
		"genericTypeName", "primitiveTypeName", "value", "type", "bool", "date", 
		"num", "list", "year", "month", "day", "string", "int", "decimal", "money", 
		"id", "keyValuePairs", "keyValuePair", "key", "expression", "comparison", 
		"arithmetic"
	};

	public override string GrammarFileName { get { return "QLMain.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QLMainParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FormContext : ParserRuleContext {
		public FormSectionContext formSection() {
			return GetRuleContext<FormSectionContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_form);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(T__0);
			State = 57; formSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormSectionContext : ParserRuleContext {
		public FormObjectContext formObject(int i) {
			return GetRuleContext<FormObjectContext>(i);
		}
		public IReadOnlyList<FormObjectContext> formObject() {
			return GetRuleContexts<FormObjectContext>();
		}
		public FormSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formSection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormSectionContext formSection() {
		FormSectionContext _localctx = new FormSectionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_formSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(T__18);
			State = 63;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__19 || _la==T__4) {
				{
				{
				State = 60; formObject();
				}
				}
				State = 65;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 66; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormObjectContext : ParserRuleContext {
		public QuestionContext question() {
			return GetRuleContext<QuestionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public FormObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formObject; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormObjectContext formObject() {
		FormObjectContext _localctx = new FormObjectContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_formObject);
		try {
			State = 70;
			switch (_input.La(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; question();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; conditional();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public KeyValuePairsContext keyValuePairs() {
			return GetRuleContext<KeyValuePairsContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public QuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_question; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionContext question() {
		QuestionContext _localctx = new QuestionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_question);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(T__4);
			State = 73; id();
			State = 74; typeName();
			State = 75; keyValuePairs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormSectionContext formSection() {
			return GetRuleContext<FormSectionContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_conditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(T__19);
			State = 78; expression(0);
			State = 79; formSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public PrimitiveTypeNameContext primitiveTypeName() {
			return GetRuleContext<PrimitiveTypeNameContext>(0);
		}
		public GenericTypeNameContext genericTypeName() {
			return GetRuleContext<GenericTypeNameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_typeName);
		try {
			State = 83;
			switch (_input.La(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 81; genericTypeName();
				}
				break;
			case T__20:
			case T__14:
			case T__13:
			case T__5:
			case T__3:
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 82; primitiveTypeName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericTypeNameContext : ParserRuleContext {
		public PrimitiveTypeNameContext primitiveTypeName() {
			return GetRuleContext<PrimitiveTypeNameContext>(0);
		}
		public GenericTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericTypeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericTypeNameContext genericTypeName() {
		GenericTypeNameContext _localctx = new GenericTypeNameContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_genericTypeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__15);
			State = 86; primitiveTypeName();
			State = 87; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeNameContext : ParserRuleContext {
		public PrimitiveTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveTypeName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveTypeName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeNameContext primitiveTypeName() {
		PrimitiveTypeNameContext _localctx = new PrimitiveTypeNameContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_primitiveTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__14) | (1L << T__13) | (1L << T__5) | (1L << T__3) | (1L << T__2))) != 0)) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_value);
		try {
			State = 93;
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91; type();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumValueContext : TypeContext {
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public NumValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateValueContext : TypeContext {
		public DateContext date() {
			return GetRuleContext<DateContext>(0);
		}
		public DateValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListValueContext : TypeContext {
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public ListValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolValueContext : TypeContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BoolValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValueContext : TypeContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringValueContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_type);
		try {
			State = 100;
			switch (_input.La(1)) {
			case T__11:
			case T__6:
				_localctx = new BoolValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; @bool();
				}
				break;
			case STRING:
				_localctx = new StringValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 96; @string();
				}
				break;
			case T__7:
				_localctx = new DateValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; date();
				}
				break;
			case INT:
			case DECIMAL:
			case MONEY:
				_localctx = new NumValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 98; num();
				}
				break;
			case T__9:
				_localctx = new ListValueContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 99; list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_bool);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			_la = _input.La(1);
			if ( !(_la==T__11 || _la==T__6) ) {
			_errHandler.RecoverInline(this);
			}
			Consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateContext : ParserRuleContext {
		public YearContext year() {
			return GetRuleContext<YearContext>(0);
		}
		public MonthContext month() {
			return GetRuleContext<MonthContext>(0);
		}
		public DayContext day() {
			return GetRuleContext<DayContext>(0);
		}
		public DateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_date; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateContext date() {
		DateContext _localctx = new DateContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_date);
		try {
			State = 122;
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(T__7);
				State = 105; year();
				State = 106; Match(DIV);
				State = 107; month();
				State = 108; Match(DIV);
				State = 109; day();
				State = 110; Match(T__1);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; Match(T__7);
				State = 113; year();
				State = 114; Match(DIV);
				State = 115; month();
				State = 116; Match(T__1);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 118; Match(T__7);
				State = 119; year();
				State = 120; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
	 
		public NumContext() { }
		public virtual void CopyFrom(NumContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumIntContext : NumContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public NumIntContext(NumContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumDecimalContext : NumContext {
		public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		public NumDecimalContext(NumContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumMoneyContext : NumContext {
		public MoneyContext money() {
			return GetRuleContext<MoneyContext>(0);
		}
		public NumMoneyContext(NumContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumMoney(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_num);
		try {
			State = 127;
			switch (_input.La(1)) {
			case INT:
				_localctx = new NumIntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; @int();
				}
				break;
			case MONEY:
				_localctx = new NumMoneyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; money();
				}
				break;
			case DECIMAL:
				_localctx = new NumDecimalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 126; @decimal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IReadOnlyList<TypeContext> type() {
			return GetRuleContexts<TypeContext>();
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(T__9);
			State = 138;
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__9) | (1L << T__7) | (1L << T__6) | (1L << INT) | (1L << DECIMAL) | (1L << MONEY) | (1L << STRING))) != 0)) {
				{
				State = 130; type();
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__10) {
					{
					{
					State = 131; Match(T__10);
					State = 132; type();
					}
					}
					State = 137;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 140; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YearContext : ParserRuleContext {
		public ITerminalNode YEAR() { return GetToken(QLMainParser.YEAR, 0); }
		public YearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_year; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYear(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public YearContext year() {
		YearContext _localctx = new YearContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_year);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(YEAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MonthContext : ParserRuleContext {
		public ITerminalNode MONTH() { return GetToken(QLMainParser.MONTH, 0); }
		public MonthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_month; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMonth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MonthContext month() {
		MonthContext _localctx = new MonthContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_month);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; Match(MONTH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayContext : ParserRuleContext {
		public ITerminalNode DAY() { return GetToken(QLMainParser.DAY, 0); }
		public DayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_day; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDay(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DayContext day() {
		DayContext _localctx = new DayContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_day);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(DAY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QLMainParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(QLMainParser.INT, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(QLMainParser.DECIMAL, 0); }
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_decimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MoneyContext : ParserRuleContext {
		public ITerminalNode MONEY() { return GetToken(QLMainParser.MONEY, 0); }
		public MoneyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_money; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMoney(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MoneyContext money() {
		MoneyContext _localctx = new MoneyContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_money);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(MONEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ALPHANUMERIC() { return GetToken(QLMainParser.ALPHANUMERIC, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156; Match(ALPHANUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairsContext : ParserRuleContext {
		public IReadOnlyList<KeyValuePairContext> keyValuePair() {
			return GetRuleContexts<KeyValuePairContext>();
		}
		public KeyValuePairContext keyValuePair(int i) {
			return GetRuleContext<KeyValuePairContext>(i);
		}
		public KeyValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePairs; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairsContext keyValuePairs() {
		KeyValuePairsContext _localctx = new KeyValuePairsContext(_ctx, State);
		EnterRule(_localctx, 44, RULE_keyValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; Match(T__18);
			State = 159; keyValuePair();
			State = 164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__10) {
				{
				{
				State = 160; Match(T__10);
				State = 161; keyValuePair();
				}
				}
				State = 166;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 167; Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyValuePairContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public KeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyValuePair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyValuePairContext keyValuePair() {
		KeyValuePairContext _localctx = new KeyValuePairContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_keyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; key();
			State = 170; Match(T__17);
			State = 171; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode ALPHANUMERIC() { return GetToken(QLMainParser.ALPHANUMERIC, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(ALPHANUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OrContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PriorityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionComparisonContext : ExpressionContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ExpressionComparisonContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionTypeContext : ExpressionContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ExpressionTypeContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionIdContext : ExpressionContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionIdContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 50;
		EnterRecursionRule(_localctx, 50, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				_localctx = new NegateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 176; Match(NOT);
				State = 177; expression(5);
				}
				break;

			case 2:
				{
				_localctx = new PriorityExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 178; Match(T__12);
				State = 179; expression(0);
				State = 180; Match(T__1);
				}
				break;

			case 3:
				{
				_localctx = new ExpressionTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 182; type();
				}
				break;

			case 4:
				{
				_localctx = new ExpressionIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 183; id();
				}
				break;

			case 5:
				{
				_localctx = new ExpressionComparisonContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 184; comparison();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 198;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 196;
					switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
					case 1:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 187;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 188; ((AndContext)_localctx).op = Match(AND);
						State = 189; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 190;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 191; ((OrContext)_localctx).op = Match(OR);
						State = 192; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new EqualityContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 193;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 194;
						((EqualityContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==EQ || _la==NEQ) ) {
							((EqualityContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 195; expression(3);
						}
						break;
					}
					} 
				}
				State = 200;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	 
		public ComparisonContext() { }
		public virtual void CopyFrom(ComparisonContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PriorityComparisonContext : ComparisonContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public PriorityComparisonContext(ComparisonContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticComparisonContext : ComparisonContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public ArithmeticComparisonContext(ComparisonContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_comparison);
		int _la;
		try {
			State = 209;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				_localctx = new PriorityComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; Match(T__12);
				State = 202; comparison();
				State = 203; Match(T__1);
				}
				break;

			case 2:
				_localctx = new ArithmeticComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 205; arithmetic(0);
				State = 206;
				((ArithmeticComparisonContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GET) | (1L << LET))) != 0)) ) {
					((ArithmeticComparisonContext)_localctx).op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 207; arithmetic(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticContext : ParserRuleContext {
		public ArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic; } }
	 
		public ArithmeticContext() { }
		public virtual void CopyFrom(ArithmeticContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubAddContext : ArithmeticContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public SubAddContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticNumContext : ArithmeticContext {
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ArithmeticNumContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticNum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticIdContext : ArithmeticContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ArithmeticIdContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivMulContext : ArithmeticContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public DivMulContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityArithmeticContext : ArithmeticContext {
		public ArithmeticContext arithmetic() {
			return GetRuleContext<ArithmeticContext>(0);
		}
		public PriorityArithmeticContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticContext arithmetic() {
		return arithmetic(0);
	}

	private ArithmeticContext arithmetic(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ArithmeticContext _localctx = new ArithmeticContext(_ctx, _parentState);
		ArithmeticContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_arithmetic, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			switch (_input.La(1)) {
			case T__12:
				{
				_localctx = new PriorityArithmeticContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 212; Match(T__12);
				State = 213; arithmetic(0);
				State = 214; Match(T__1);
				}
				break;
			case ALPHANUMERIC:
				{
				_localctx = new ArithmeticIdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 216; id();
				}
				break;
			case INT:
			case DECIMAL:
			case MONEY:
				{
				_localctx = new ArithmeticNumContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 217; num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 228;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 226;
					switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
					case 1:
						{
						_localctx = new DivMulContext(new ArithmeticContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic);
						State = 220;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 221;
						((DivMulContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((DivMulContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 222; arithmetic(5);
						}
						break;

					case 2:
						{
						_localctx = new SubAddContext(new ArithmeticContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic);
						State = 223;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 224;
						((SubAddContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==SUB || _la==ADD) ) {
							((SubAddContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 225; arithmetic(4);
						}
						break;
					}
					} 
				}
				State = 230;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,16,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 25: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 27: return arithmetic_sempred((ArithmeticContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool arithmetic_sempred(ArithmeticContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(_ctx, 4);

		case 4: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3/\xEA\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\a\x3@\n"+
		"\x3\f\x3\xE\x3\x43\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4I\n\x4\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x5\aV\n\a\x3\b\x3"+
		"\b\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x5\n`\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5"+
		"\vg\n\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3"+
		"\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x5\r}\n\r\x3\xE\x3\xE\x3\xE\x5\xE"+
		"\x82\n\xE\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x88\n\xF\f\xF\xE\xF\x8B\v\xF\x5"+
		"\xF\x8D\n\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3"+
		"\x18\x3\x18\x3\x18\x3\x18\a\x18\xA5\n\x18\f\x18\xE\x18\xA8\v\x18\x3\x18"+
		"\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\xBC\n\x1B\x3"+
		"\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\a\x1B\xC7"+
		"\n\x1B\f\x1B\xE\x1B\xCA\v\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\xD4\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x5\x1D\xDD\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\a\x1D\xE5\n\x1D\f\x1D\xE\x1D\xE8\v\x1D\x3\x1D\x2\x2\x4\x34\x38\x1E\x2"+
		"\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2"+
		"\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34"+
		"\x2\x36\x2\x38\x2\x2\b\x6\x2\x3\x3\t\n\x12\x12\x14\x15\x4\x2\f\f\x11\x11"+
		"\x3\x2\x1A\x1B\x4\x2\x18\x19\x1C\x1D\x3\x2!\"\x3\x2#$\xE8\x2:\x3\x2\x2"+
		"\x2\x4=\x3\x2\x2\x2\x6H\x3\x2\x2\x2\bJ\x3\x2\x2\x2\nO\x3\x2\x2\x2\fU\x3"+
		"\x2\x2\x2\xEW\x3\x2\x2\x2\x10[\x3\x2\x2\x2\x12_\x3\x2\x2\x2\x14\x66\x3"+
		"\x2\x2\x2\x16h\x3\x2\x2\x2\x18|\x3\x2\x2\x2\x1A\x81\x3\x2\x2\x2\x1C\x83"+
		"\x3\x2\x2\x2\x1E\x90\x3\x2\x2\x2 \x92\x3\x2\x2\x2\"\x94\x3\x2\x2\x2$\x96"+
		"\x3\x2\x2\x2&\x98\x3\x2\x2\x2(\x9A\x3\x2\x2\x2*\x9C\x3\x2\x2\x2,\x9E\x3"+
		"\x2\x2\x2.\xA0\x3\x2\x2\x2\x30\xAB\x3\x2\x2\x2\x32\xAF\x3\x2\x2\x2\x34"+
		"\xBB\x3\x2\x2\x2\x36\xD3\x3\x2\x2\x2\x38\xDC\x3\x2\x2\x2:;\a\x17\x2\x2"+
		";<\x5\x4\x3\x2<\x3\x3\x2\x2\x2=\x41\a\x5\x2\x2>@\x5\x6\x4\x2?>\x3\x2\x2"+
		"\x2@\x43\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\x3\x2"+
		"\x2\x2\x43\x41\x3\x2\x2\x2\x44\x45\a\a\x2\x2\x45\x5\x3\x2\x2\x2\x46I\x5"+
		"\b\x5\x2GI\x5\n\x6\x2H\x46\x3\x2\x2\x2HG\x3\x2\x2\x2I\a\x3\x2\x2\x2JK"+
		"\a\x13\x2\x2KL\x5,\x17\x2LM\x5\f\a\x2MN\x5.\x18\x2N\t\x3\x2\x2\x2OP\a"+
		"\x4\x2\x2PQ\x5\x34\x1B\x2QR\x5\x4\x3\x2R\v\x3\x2\x2\x2SV\x5\xE\b\x2TV"+
		"\x5\x10\t\x2US\x3\x2\x2\x2UT\x3\x2\x2\x2V\r\x3\x2\x2\x2WX\a\b\x2\x2XY"+
		"\x5\x10\t\x2YZ\a\xF\x2\x2Z\xF\x3\x2\x2\x2[\\\t\x2\x2\x2\\\x11\x3\x2\x2"+
		"\x2]`\x5\x14\v\x2^`\x5\x34\x1B\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2`\x13\x3"+
		"\x2\x2\x2\x61g\x5\x16\f\x2\x62g\x5$\x13\x2\x63g\x5\x18\r\x2\x64g\x5\x1A"+
		"\xE\x2\x65g\x5\x1C\xF\x2\x66\x61\x3\x2\x2\x2\x66\x62\x3\x2\x2\x2\x66\x63"+
		"\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66\x65\x3\x2\x2\x2g\x15\x3\x2\x2\x2"+
		"hi\t\x3\x2\x2i\x17\x3\x2\x2\x2jk\a\x10\x2\x2kl\x5\x1E\x10\x2lm\a\"\x2"+
		"\x2mn\x5 \x11\x2no\a\"\x2\x2op\x5\"\x12\x2pq\a\x16\x2\x2q}\x3\x2\x2\x2"+
		"rs\a\x10\x2\x2st\x5\x1E\x10\x2tu\a\"\x2\x2uv\x5 \x11\x2vw\a\x16\x2\x2"+
		"w}\x3\x2\x2\x2xy\a\x10\x2\x2yz\x5\x1E\x10\x2z{\a\x16\x2\x2{}\x3\x2\x2"+
		"\x2|j\x3\x2\x2\x2|r\x3\x2\x2\x2|x\x3\x2\x2\x2}\x19\x3\x2\x2\x2~\x82\x5"+
		"&\x14\x2\x7F\x82\x5*\x16\x2\x80\x82\x5(\x15\x2\x81~\x3\x2\x2\x2\x81\x7F"+
		"\x3\x2\x2\x2\x81\x80\x3\x2\x2\x2\x82\x1B\x3\x2\x2\x2\x83\x8C\a\xE\x2\x2"+
		"\x84\x89\x5\x14\v\x2\x85\x86\a\r\x2\x2\x86\x88\x5\x14\v\x2\x87\x85\x3"+
		"\x2\x2\x2\x88\x8B\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x89\x8A\x3\x2\x2\x2"+
		"\x8A\x8D\x3\x2\x2\x2\x8B\x89\x3\x2\x2\x2\x8C\x84\x3\x2\x2\x2\x8C\x8D\x3"+
		"\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x8F\a\xF\x2\x2\x8F\x1D\x3\x2\x2\x2\x90"+
		"\x91\a(\x2\x2\x91\x1F\x3\x2\x2\x2\x92\x93\a)\x2\x2\x93!\x3\x2\x2\x2\x94"+
		"\x95\a*\x2\x2\x95#\x3\x2\x2\x2\x96\x97\a,\x2\x2\x97%\x3\x2\x2\x2\x98\x99"+
		"\a%\x2\x2\x99\'\x3\x2\x2\x2\x9A\x9B\a&\x2\x2\x9B)\x3\x2\x2\x2\x9C\x9D"+
		"\a\'\x2\x2\x9D+\x3\x2\x2\x2\x9E\x9F\a+\x2\x2\x9F-\x3\x2\x2\x2\xA0\xA1"+
		"\a\x5\x2\x2\xA1\xA6\x5\x30\x19\x2\xA2\xA3\a\r\x2\x2\xA3\xA5\x5\x30\x19"+
		"\x2\xA4\xA2\x3\x2\x2\x2\xA5\xA8\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA6\xA7"+
		"\x3\x2\x2\x2\xA7\xA9\x3\x2\x2\x2\xA8\xA6\x3\x2\x2\x2\xA9\xAA\a\a\x2\x2"+
		"\xAA/\x3\x2\x2\x2\xAB\xAC\x5\x32\x1A\x2\xAC\xAD\a\x6\x2\x2\xAD\xAE\x5"+
		"\x12\n\x2\xAE\x31\x3\x2\x2\x2\xAF\xB0\a+\x2\x2\xB0\x33\x3\x2\x2\x2\xB1"+
		"\xB2\b\x1B\x1\x2\xB2\xB3\a \x2\x2\xB3\xBC\x5\x34\x1B\a\xB4\xB5\a\v\x2"+
		"\x2\xB5\xB6\x5\x34\x1B\x2\xB6\xB7\a\x16\x2\x2\xB7\xBC\x3\x2\x2\x2\xB8"+
		"\xBC\x5\x14\v\x2\xB9\xBC\x5,\x17\x2\xBA\xBC\x5\x36\x1C\x2\xBB\xB1\x3\x2"+
		"\x2\x2\xBB\xB4\x3\x2\x2\x2\xBB\xB8\x3\x2\x2\x2\xBB\xB9\x3\x2\x2\x2\xBB"+
		"\xBA\x3\x2\x2\x2\xBC\xC8\x3\x2\x2\x2\xBD\xBE\f\x6\x2\x2\xBE\xBF\a\x1E"+
		"\x2\x2\xBF\xC7\x5\x34\x1B\a\xC0\xC1\f\x5\x2\x2\xC1\xC2\a\x1F\x2\x2\xC2"+
		"\xC7\x5\x34\x1B\x6\xC3\xC4\f\x4\x2\x2\xC4\xC5\t\x4\x2\x2\xC5\xC7\x5\x34"+
		"\x1B\x5\xC6\xBD\x3\x2\x2\x2\xC6\xC0\x3\x2\x2\x2\xC6\xC3\x3\x2\x2\x2\xC7"+
		"\xCA\x3\x2\x2\x2\xC8\xC6\x3\x2\x2\x2\xC8\xC9\x3\x2\x2\x2\xC9\x35\x3\x2"+
		"\x2\x2\xCA\xC8\x3\x2\x2\x2\xCB\xCC\a\v\x2\x2\xCC\xCD\x5\x36\x1C\x2\xCD"+
		"\xCE\a\x16\x2\x2\xCE\xD4\x3\x2\x2\x2\xCF\xD0\x5\x38\x1D\x2\xD0\xD1\t\x5"+
		"\x2\x2\xD1\xD2\x5\x38\x1D\x2\xD2\xD4\x3\x2\x2\x2\xD3\xCB\x3\x2\x2\x2\xD3"+
		"\xCF\x3\x2\x2\x2\xD4\x37\x3\x2\x2\x2\xD5\xD6\b\x1D\x1\x2\xD6\xD7\a\v\x2"+
		"\x2\xD7\xD8\x5\x38\x1D\x2\xD8\xD9\a\x16\x2\x2\xD9\xDD\x3\x2\x2\x2\xDA"+
		"\xDD\x5,\x17\x2\xDB\xDD\x5\x1A\xE\x2\xDC\xD5\x3\x2\x2\x2\xDC\xDA\x3\x2"+
		"\x2\x2\xDC\xDB\x3\x2\x2\x2\xDD\xE6\x3\x2\x2\x2\xDE\xDF\f\x6\x2\x2\xDF"+
		"\xE0\t\x6\x2\x2\xE0\xE5\x5\x38\x1D\a\xE1\xE2\f\x5\x2\x2\xE2\xE3\t\a\x2"+
		"\x2\xE3\xE5\x5\x38\x1D\x6\xE4\xDE\x3\x2\x2\x2\xE4\xE1\x3\x2\x2\x2\xE5"+
		"\xE8\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\x39\x3\x2"+
		"\x2\x2\xE8\xE6\x3\x2\x2\x2\x13\x41HU_\x66|\x81\x89\x8C\xA6\xBB\xC6\xC8"+
		"\xD3\xDC\xE4\xE6";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Grammar
