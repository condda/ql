//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Daniel\Desktop\Backup\QuestionnaireLanguage\Grammar\QLMain.g4 by ANTLR 4.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.3")]
[System.CLSCompliant(false)]
public partial class QLMainParser : Parser {
	public const int
		T__9=1, T__8=2, T__7=3, T__6=4, T__5=5, T__4=6, T__3=7, T__2=8, T__1=9, 
		T__0=10, GT=11, LT=12, EQ=13, NEQ=14, GET=15, LET=16, AND=17, OR=18, NOT=19, 
		MUL=20, DIV=21, SUB=22, ADD=23, TRUE=24, FALSE=25, BOOL=26, STRING=27, 
		DATE=28, INT=29, INTLITERAL=30, YEAR=31, MONTH=32, DAY=33, ALPHANUMERIC=34, 
		STRINGLITERAL=35, WS=36, BLOCK_COMMENT=37, LINE_COMMENT=38;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'question'", "'label'", "'('", "')'", "'computed'", "':'", 
		"'enable when'", "'{'", "'form'", "'}'", "'>'", "'<'", "'=='", "'!='", 
		"'>='", "'<='", "'&&'", "'||'", "'!'", "'*'", "'/'", "'-'", "'+'", "'True'", 
		"'False'", "'bool'", "'string'", "'date'", "'int'", "INTLITERAL", "YEAR", 
		"MONTH", "DAY", "ALPHANUMERIC", "STRINGLITERAL", "WS", "BLOCK_COMMENT", 
		"LINE_COMMENT"
	};
	public const int
		RULE_form = 0, RULE_formSection = 1, RULE_formObject = 2, RULE_question = 3, 
		RULE_conditional = 4, RULE_type = 5, RULE_value = 6, RULE_bool = 7, RULE_string = 8, 
		RULE_int = 9, RULE_id = 10, RULE_label = 11, RULE_computed = 12, RULE_computation = 13, 
		RULE_expression = 14, RULE_comparison = 15, RULE_arithmetic = 16;
	public static readonly string[] ruleNames = {
		"form", "formSection", "formObject", "question", "conditional", "type", 
		"value", "bool", "string", "int", "id", "label", "computed", "computation", 
		"expression", "comparison", "arithmetic"
	};

	public override string GrammarFileName { get { return "QLMain.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QLMainParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class FormContext : ParserRuleContext {
		public FormSectionContext formSection() {
			return GetRuleContext<FormSectionContext>(0);
		}
		public FormContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_form; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormContext form() {
		FormContext _localctx = new FormContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_form);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(T__1);
			State = 35; formSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormSectionContext : ParserRuleContext {
		public FormObjectContext formObject(int i) {
			return GetRuleContext<FormObjectContext>(i);
		}
		public IReadOnlyList<FormObjectContext> formObject() {
			return GetRuleContexts<FormObjectContext>();
		}
		public FormSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formSection; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormSection(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormSectionContext formSection() {
		FormSectionContext _localctx = new FormSectionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_formSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(T__2);
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__9 || _la==T__3) {
				{
				{
				State = 38; formObject();
				}
				}
				State = 43;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 44; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormObjectContext : ParserRuleContext {
		public QuestionContext question() {
			return GetRuleContext<QuestionContext>(0);
		}
		public ConditionalContext conditional() {
			return GetRuleContext<ConditionalContext>(0);
		}
		public FormObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formObject; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormObject(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormObjectContext formObject() {
		FormObjectContext _localctx = new FormObjectContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_formObject);
		try {
			State = 48;
			switch (_input.La(1)) {
			case T__9:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; question();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 47; conditional();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuestionContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ComputedContext computed() {
			return GetRuleContext<ComputedContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public QuestionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_question; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuestion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuestionContext question() {
		QuestionContext _localctx = new QuestionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_question);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(T__9);
			State = 51; id();
			State = 52; type();
			State = 53; label();
			State = 55;
			_la = _input.La(1);
			if (_la==T__5) {
				{
				State = 54; computed();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FormSectionContext formSection() {
			return GetRuleContext<FormSectionContext>(0);
		}
		public ConditionalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalContext conditional() {
		ConditionalContext _localctx = new ConditionalContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_conditional);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(T__3);
			State = 58; expression(0);
			State = 59; formSection();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolTypeContext : TypeContext {
		public ITerminalNode BOOL() { return GetToken(QLMainParser.BOOL, 0); }
		public BoolTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringTypeContext : TypeContext {
		public ITerminalNode STRING() { return GetToken(QLMainParser.STRING, 0); }
		public StringTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringType(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntTypeContext : TypeContext {
		public ITerminalNode INT() { return GetToken(QLMainParser.INT, 0); }
		public IntTypeContext(TypeContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			State = 64;
			switch (_input.La(1)) {
			case BOOL:
				_localctx = new BoolTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; Match(BOOL);
				}
				break;
			case STRING:
				_localctx = new StringTypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(STRING);
				}
				break;
			case INT:
				_localctx = new IntTypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
	 
		public ValueContext() { }
		public virtual void CopyFrom(ValueContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BoolValueContext : ValueContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BoolValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringValueContext : ValueContext {
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public StringValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntValueContext : ValueContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IntValueContext(ValueContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_value);
		try {
			State = 69;
			switch (_input.La(1)) {
			case TRUE:
			case FALSE:
				_localctx = new BoolValueContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; @bool();
				}
				break;
			case STRINGLITERAL:
				_localctx = new StringValueContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 67; @string();
				}
				break;
			case INTLITERAL:
				_localctx = new IntValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 68; @int();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolContext : ParserRuleContext {
		public BoolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool; } }
	 
		public BoolContext() { }
		public virtual void CopyFrom(BoolContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TrueBoolContext : BoolContext {
		public ITerminalNode TRUE() { return GetToken(QLMainParser.TRUE, 0); }
		public TrueBoolContext(BoolContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTrueBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FalseBoolContext : BoolContext {
		public ITerminalNode FALSE() { return GetToken(QLMainParser.FALSE, 0); }
		public FalseBoolContext(BoolContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFalseBool(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolContext @bool() {
		BoolContext _localctx = new BoolContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_bool);
		try {
			State = 73;
			switch (_input.La(1)) {
			case TRUE:
				_localctx = new TrueBoolContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 71; Match(TRUE);
				}
				break;
			case FALSE:
				_localctx = new FalseBoolContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 72; Match(FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRINGLITERAL() { return GetToken(QLMainParser.STRINGLITERAL, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(STRINGLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntContext : ParserRuleContext {
		public ITerminalNode INTLITERAL() { return GetToken(QLMainParser.INTLITERAL, 0); }
		public IntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntContext @int() {
		IntContext _localctx = new IntContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_int);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77; Match(INTLITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode ALPHANUMERIC() { return GetToken(QLMainParser.ALPHANUMERIC, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(ALPHANUMERIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(QLMainParser.STRING, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(T__8);
			State = 82; Match(T__4);
			State = 83; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputedContext : ParserRuleContext {
		public ComputationContext computation() {
			return GetRuleContext<ComputationContext>(0);
		}
		public ComputedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computed; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputedContext computed() {
		ComputedContext _localctx = new ComputedContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_computed);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(T__5);
			State = 86; Match(T__4);
			State = 87; computation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComputationContext : ParserRuleContext {
		public ComputationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_computation; } }
	 
		public ComputationContext() { }
		public virtual void CopyFrom(ComputationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComputationExpressionContext : ComputationContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ComputationExpressionContext(ComputationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputationValueContext : ComputationContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ComputationValueContext(ComputationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputationValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputationIdContext : ComputationContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ComputationIdContext(ComputationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputationId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComputationArithmeticContext : ComputationContext {
		public ArithmeticContext arithmetic() {
			return GetRuleContext<ArithmeticContext>(0);
		}
		public ComputationArithmeticContext(ComputationContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComputationArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComputationContext computation() {
		ComputationContext _localctx = new ComputationContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_computation);
		try {
			State = 93;
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new ComputationIdContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 89; id();
				}
				break;

			case 2:
				_localctx = new ComputationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 90; expression(0);
				}
				break;

			case 3:
				_localctx = new ComputationArithmeticContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 91; arithmetic(0);
				}
				break;

			case 4:
				_localctx = new ComputationValueContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 92; value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OR() { return GetToken(QLMainParser.OR, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PriorityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		public IToken op;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(QLMainParser.AND, 0); }
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdExpressionContext : ExpressionContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IdExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegateContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpressionContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public ITerminalNode NEQ() { return GetToken(QLMainParser.NEQ, 0); }
		public ITerminalNode EQ() { return GetToken(QLMainParser.EQ, 0); }
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public EqualityContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		public BoolContext @bool() {
			return GetRuleContext<BoolContext>(0);
		}
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				_localctx = new NegateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 96; Match(NOT);
				State = 97; expression(5);
				}
				break;

			case 2:
				{
				_localctx = new PriorityExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 98; Match(T__7);
				State = 99; expression(0);
				State = 100; Match(T__6);
				}
				break;

			case 3:
				{
				_localctx = new BoolExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 102; @bool();
				}
				break;

			case 4:
				{
				_localctx = new IdExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 103; id();
				}
				break;

			case 5:
				{
				_localctx = new EqualityContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 104; arithmetic(0);
				State = 105;
				((EqualityContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==EQ || _la==NEQ) ) {
					((EqualityContext)_localctx).op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 106; arithmetic(0);
				}
				break;

			case 6:
				{
				_localctx = new ComparisonExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 108; comparison();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 119;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 117;
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 111;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 112; ((AndContext)_localctx).op = Match(AND);
						State = 113; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 114;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 115; ((OrContext)_localctx).op = Match(OR);
						State = 116; expression(4);
						}
						break;
					}
					} 
				}
				State = 121;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
	 
		public ComparisonContext() { }
		public virtual void CopyFrom(ComparisonContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PriorityComparisonContext : ComparisonContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public PriorityComparisonContext(ComparisonContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalComparisonContext : ComparisonContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public ITerminalNode LT() { return GetToken(QLMainParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(QLMainParser.GT, 0); }
		public ITerminalNode LET() { return GetToken(QLMainParser.LET, 0); }
		public ITerminalNode GET() { return GetToken(QLMainParser.GET, 0); }
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public RelationalComparisonContext(ComparisonContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_comparison);
		int _la;
		try {
			State = 130;
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				_localctx = new PriorityComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 122; Match(T__7);
				State = 123; comparison();
				State = 124; Match(T__6);
				}
				break;

			case 2:
				_localctx = new RelationalComparisonContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 126; arithmetic(0);
				State = 127;
				((RelationalComparisonContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GET) | (1L << LET))) != 0)) ) {
					((RelationalComparisonContext)_localctx).op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 128; arithmetic(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticContext : ParserRuleContext {
		public ArithmeticContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic; } }
	 
		public ArithmeticContext() { }
		public virtual void CopyFrom(ArithmeticContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubAddContext : ArithmeticContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public ITerminalNode SUB() { return GetToken(QLMainParser.SUB, 0); }
		public ITerminalNode ADD() { return GetToken(QLMainParser.ADD, 0); }
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public SubAddContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdArithmeticContext : ArithmeticContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IdArithmeticContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivMulContext : ArithmeticContext {
		public IToken op;
		public ArithmeticContext arithmetic(int i) {
			return GetRuleContext<ArithmeticContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(QLMainParser.DIV, 0); }
		public IReadOnlyList<ArithmeticContext> arithmetic() {
			return GetRuleContexts<ArithmeticContext>();
		}
		public ITerminalNode MUL() { return GetToken(QLMainParser.MUL, 0); }
		public DivMulContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PriorityArithmeticContext : ArithmeticContext {
		public ArithmeticContext arithmetic() {
			return GetRuleContext<ArithmeticContext>(0);
		}
		public PriorityArithmeticContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPriorityArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntArithmeticContext : ArithmeticContext {
		public IntContext @int() {
			return GetRuleContext<IntContext>(0);
		}
		public IntArithmeticContext(ArithmeticContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQLMainVisitor<TResult> typedVisitor = visitor as IQLMainVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntArithmetic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticContext arithmetic() {
		return arithmetic(0);
	}

	private ArithmeticContext arithmetic(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ArithmeticContext _localctx = new ArithmeticContext(_ctx, _parentState);
		ArithmeticContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_arithmetic, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 139;
			switch (_input.La(1)) {
			case T__7:
				{
				_localctx = new PriorityArithmeticContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 133; Match(T__7);
				State = 134; arithmetic(0);
				State = 135; Match(T__6);
				}
				break;
			case INTLITERAL:
				{
				_localctx = new IntArithmeticContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 137; @int();
				}
				break;
			case ALPHANUMERIC:
				{
				_localctx = new IdArithmeticContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 138; id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 149;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 147;
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new DivMulContext(new ArithmeticContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic);
						State = 141;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 142;
						((DivMulContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((DivMulContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 143; arithmetic(5);
						}
						break;

					case 2:
						{
						_localctx = new SubAddContext(new ArithmeticContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic);
						State = 144;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 145;
						((SubAddContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==SUB || _la==ADD) ) {
							((SubAddContext)_localctx).op = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 146; arithmetic(4);
						}
						break;
					}
					} 
				}
				State = 151;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 16: return arithmetic_sempred((ArithmeticContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool arithmetic_sempred(ArithmeticContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 4);

		case 3: return Precpred(_ctx, 3);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3(\x9B\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\a\x3*\n\x3"+
		"\f\x3\xE\x3-\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x5\x4\x33\n\x4\x3\x5\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x5\x5:\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x5"+
		"\a\x43\n\a\x3\b\x3\b\x3\b\x5\bH\n\b\x3\t\x3\t\x5\tL\n\t\x3\n\x3\n\x3\v"+
		"\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x5\xF`\n\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10p\n\x10\x3"+
		"\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\a\x10x\n\x10\f\x10\xE\x10{\v\x10"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x5\x11\x85\n"+
		"\x11\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x8E\n\x12"+
		"\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x12\a\x12\x96\n\x12\f\x12\xE\x12"+
		"\x99\v\x12\x3\x12\x2\x2\x4\x1E\"\x13\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2"+
		"\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2"+
		"\x2\x6\x3\x2\xF\x10\x4\x2\r\xE\x11\x12\x3\x2\x16\x17\x3\x2\x18\x19\xA0"+
		"\x2$\x3\x2\x2\x2\x4\'\x3\x2\x2\x2\x6\x32\x3\x2\x2\x2\b\x34\x3\x2\x2\x2"+
		"\n;\x3\x2\x2\x2\f\x42\x3\x2\x2\x2\xEG\x3\x2\x2\x2\x10K\x3\x2\x2\x2\x12"+
		"M\x3\x2\x2\x2\x14O\x3\x2\x2\x2\x16Q\x3\x2\x2\x2\x18S\x3\x2\x2\x2\x1AW"+
		"\x3\x2\x2\x2\x1C_\x3\x2\x2\x2\x1Eo\x3\x2\x2\x2 \x84\x3\x2\x2\x2\"\x8D"+
		"\x3\x2\x2\x2$%\a\v\x2\x2%&\x5\x4\x3\x2&\x3\x3\x2\x2\x2\'+\a\n\x2\x2(*"+
		"\x5\x6\x4\x2)(\x3\x2\x2\x2*-\x3\x2\x2\x2+)\x3\x2\x2\x2+,\x3\x2\x2\x2,"+
		".\x3\x2\x2\x2-+\x3\x2\x2\x2./\a\f\x2\x2/\x5\x3\x2\x2\x2\x30\x33\x5\b\x5"+
		"\x2\x31\x33\x5\n\x6\x2\x32\x30\x3\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33\a\x3"+
		"\x2\x2\x2\x34\x35\a\x3\x2\x2\x35\x36\x5\x16\f\x2\x36\x37\x5\f\a\x2\x37"+
		"\x39\x5\x18\r\x2\x38:\x5\x1A\xE\x2\x39\x38\x3\x2\x2\x2\x39:\x3\x2\x2\x2"+
		":\t\x3\x2\x2\x2;<\a\t\x2\x2<=\x5\x1E\x10\x2=>\x5\x4\x3\x2>\v\x3\x2\x2"+
		"\x2?\x43\a\x1C\x2\x2@\x43\a\x1D\x2\x2\x41\x43\a\x1F\x2\x2\x42?\x3\x2\x2"+
		"\x2\x42@\x3\x2\x2\x2\x42\x41\x3\x2\x2\x2\x43\r\x3\x2\x2\x2\x44H\x5\x10"+
		"\t\x2\x45H\x5\x12\n\x2\x46H\x5\x14\v\x2G\x44\x3\x2\x2\x2G\x45\x3\x2\x2"+
		"\x2G\x46\x3\x2\x2\x2H\xF\x3\x2\x2\x2IL\a\x1A\x2\x2JL\a\x1B\x2\x2KI\x3"+
		"\x2\x2\x2KJ\x3\x2\x2\x2L\x11\x3\x2\x2\x2MN\a%\x2\x2N\x13\x3\x2\x2\x2O"+
		"P\a \x2\x2P\x15\x3\x2\x2\x2QR\a$\x2\x2R\x17\x3\x2\x2\x2ST\a\x4\x2\x2T"+
		"U\a\b\x2\x2UV\a\x1D\x2\x2V\x19\x3\x2\x2\x2WX\a\a\x2\x2XY\a\b\x2\x2YZ\x5"+
		"\x1C\xF\x2Z\x1B\x3\x2\x2\x2[`\x5\x16\f\x2\\`\x5\x1E\x10\x2]`\x5\"\x12"+
		"\x2^`\x5\xE\b\x2_[\x3\x2\x2\x2_\\\x3\x2\x2\x2_]\x3\x2\x2\x2_^\x3\x2\x2"+
		"\x2`\x1D\x3\x2\x2\x2\x61\x62\b\x10\x1\x2\x62\x63\a\x15\x2\x2\x63p\x5\x1E"+
		"\x10\a\x64\x65\a\x5\x2\x2\x65\x66\x5\x1E\x10\x2\x66g\a\x6\x2\x2gp\x3\x2"+
		"\x2\x2hp\x5\x10\t\x2ip\x5\x16\f\x2jk\x5\"\x12\x2kl\t\x2\x2\x2lm\x5\"\x12"+
		"\x2mp\x3\x2\x2\x2np\x5 \x11\x2o\x61\x3\x2\x2\x2o\x64\x3\x2\x2\x2oh\x3"+
		"\x2\x2\x2oi\x3\x2\x2\x2oj\x3\x2\x2\x2on\x3\x2\x2\x2py\x3\x2\x2\x2qr\f"+
		"\x6\x2\x2rs\a\x13\x2\x2sx\x5\x1E\x10\atu\f\x5\x2\x2uv\a\x14\x2\x2vx\x5"+
		"\x1E\x10\x6wq\x3\x2\x2\x2wt\x3\x2\x2\x2x{\x3\x2\x2\x2yw\x3\x2\x2\x2yz"+
		"\x3\x2\x2\x2z\x1F\x3\x2\x2\x2{y\x3\x2\x2\x2|}\a\x5\x2\x2}~\x5 \x11\x2"+
		"~\x7F\a\x6\x2\x2\x7F\x85\x3\x2\x2\x2\x80\x81\x5\"\x12\x2\x81\x82\t\x3"+
		"\x2\x2\x82\x83\x5\"\x12\x2\x83\x85\x3\x2\x2\x2\x84|\x3\x2\x2\x2\x84\x80"+
		"\x3\x2\x2\x2\x85!\x3\x2\x2\x2\x86\x87\b\x12\x1\x2\x87\x88\a\x5\x2\x2\x88"+
		"\x89\x5\"\x12\x2\x89\x8A\a\x6\x2\x2\x8A\x8E\x3\x2\x2\x2\x8B\x8E\x5\x14"+
		"\v\x2\x8C\x8E\x5\x16\f\x2\x8D\x86\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D"+
		"\x8C\x3\x2\x2\x2\x8E\x97\x3\x2\x2\x2\x8F\x90\f\x6\x2\x2\x90\x91\t\x4\x2"+
		"\x2\x91\x96\x5\"\x12\a\x92\x93\f\x5\x2\x2\x93\x94\t\x5\x2\x2\x94\x96\x5"+
		"\"\x12\x6\x95\x8F\x3\x2\x2\x2\x95\x92\x3\x2\x2\x2\x96\x99\x3\x2\x2\x2"+
		"\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98#\x3\x2\x2\x2\x99\x97\x3\x2"+
		"\x2\x2\x10+\x32\x39\x42GK_owy\x84\x8D\x95\x97";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Grammar
